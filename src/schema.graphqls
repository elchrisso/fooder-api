type Food {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String!
  Recipes: [Recipe]
}

type Recipe {
  id: Int!
  createdAt: String!
  updateAt: String!
  name: String!
  description: String!
  cookTime: Int!
  Foods: [Food!]!
  User: User
  createdByUserId: Int
}

type User {
  id: Int!
  createdAt: String!
  updatedAt: String!
  email: String!
  profile: Profile
  recipes: [Recipe]
}

type Token {
  token: String
}

type Profile {
  id: Int!
  createdAt: String!
  updatedAt: String!
  fullName: String!
  phoneNumber: String
  fullAddress: String
  userId: User!
}

type FeedItem {
  id: Int!
  createdAt: String!
  updatedAt: String!
  userId: String!
  title: String!
  description: String!
}

input ProfileInput {
  fullName: String!
}

type Query {
  Food(id: Int!): Food
  allFoods: [Food]
  Recipe(id: Int!): Recipe
  allRecipes: [Recipe]
  getRecipesByUserId(id: Int!): [Recipe]

  User(id: Int!): User
  allUsers: [User]
  loggedInUser: User

  Profile(id: Int!): Profile
  allProfiles: [Profile]
  getProfileByUserId(userId: Int!): Profile

  allFeedItems: [FeedItem]
}

type Mutation {
  createFood(name: String!, description: String!): Food
  updateFood(id: Int!, name: String, description: String): Food
  createRecipe(name: String! description: String!, cookTime: Int!, foodIds: [Int!]!, createdByUserId: Int!): Recipe
  updateRecipe(id: Int!, name: String, description: String, cookTime: Int): Recipe

  createUser(email: String!, password: String!, profile: ProfileInput!): User
  loginUser(email: String!, password: String!): Token

  createProfile(fullName: String!, fullAddress: String, phoneNumber: String, userId: Int!): Profile
  updateProfile(userId: Int!, fullName: String, fullAddress: String, phoneNumber: String): Profile

  createFeedItem(userId: String!, title: String!, description: String!): FeedItem
}
